{-|
# The Poset X and Future Topos Structure

This module implements the poset X from Section 1.5 (Proposition 1.1) of
Belfiore & Bennequin (2022).

## Mathematical Context

**The construction**:
- Start with fork graph Γ̄ (oriented, with A★ vertices)
- Define X by excluding A★ vertices
- X inherits orientation from Γ̄
- X forms a poset (Proposition 1.1(i))

**Connection to Topos Theory**:

From the paper (lines 568-571):
> "It is remarkable that the main structural part... can be interpreted
> by the fact that the presheaf is a sheaf for a natural Grothendieck
> topology J on the category C: in every object x of C the only covering
> is the full category C|x, except when x is of the type of A★, where we
> add the covering made by the arrows of the type a' → A★."

**Key equivalences** (implemented in future ForkTopos.agda):
- **Corollary (line 749)**: DNN-Topos ≃ PSh(X)
- **Corollary (line 791)**: DNN-Topos ≃ Sh-Alexandrov(X)

Where:
- DNN-Topos = Sh[Γ̄, fork-topology]
- fork-topology has special coverage at A★ vertices
- Sheaf condition: F(A★) ≅ ∏_{a'→A★} F(a')

## This Module (Phase 3-5)

Implements:
1. **Phase 3**: X via subgraph classifier Ωᴳ
2. **Phase 4**: X-oriented (inheritance from Γ̄)
3. **Phase 5**: X-Poset and X-Category

**Future work**: See ForkTopos.agda (Phase 6) for full topos construction.

-}

module Neural.Graph.ForkPoset where

open import Neural.Graph.ForkCategorical
open import Neural.Graph.Oriented
open import Neural.Graph.Path

open import Cat.Instances.Graphs
open import Cat.Instances.Graphs.Omega
open import Cat.Instances.Graphs.Limits

open import Order.Base

open import 1Lab.Prelude
open import 1Lab.HLevel

open import Data.List
open import Data.Dec.Base

private variable
  o ℓ : Level

{-|
## Phase 3: Defining X via Subgraph Classifier

X is defined as the pullback of the characteristic morphism classifying
non-star vertices along the true morphism into Ωᴳ.

**From the paper** (line 716):
> "Let X denotes the set of vertices of the full subcategory CX of C
> generated by X of type a or of type A."

In our formalization:
- Type a = v-original vertices
- Type A = v-fork-tang vertices
- Excluded: v-fork-star vertices (A★)
-}

module _ (G : Graph o ℓ)
         (G-oriented : is-oriented G)
         (nodes : List (Graph.Node G))
         (nodes-complete : ∀ (n : Graph.Node G) → n ∈ nodes)
         (edge? : ∀ (x y : Graph.Node G) → Dec (Graph.Edge G x y))
         (node-eq? : ∀ (x y : Graph.Node G) → Dec (x ≡ y))
         where

  open ForkConstruction G G-oriented nodes nodes-complete edge? node-eq?

  {-|
  ### Step 3.1: Non-star Predicate

  Define which vertices of Γ̄ belong to X.
  A vertex is in X iff it is NOT a fork-star vertex.
  -}

  is-non-star : ForkVertex → Ω
  is-non-star (a , v-original) = elΩ ⊤
  is-non-star (a , v-fork-star) = elΩ ⊥
  is-non-star (a , v-fork-tang) = elΩ ⊤

  {-|
  **Mathematical Note**:
  - v-original corresponds to "type a" in the paper
  - v-fork-tang corresponds to "type A" (tangs)
  - v-fork-star corresponds to "type A★" (excluded from X)
  -}

  is-non-star-is-prop : ∀ v → is-prop ⌞ is-non-star v ⌟
  is-non-star-is-prop (a , v-original) = hlevel 1
  is-non-star-is-prop (a , v-fork-star) = hlevel 1
  is-non-star-is-prop (a , v-fork-tang) = hlevel 1

  {-|
  ### Step 3.2: Characteristic Morphism to Ωᴳ

  TODO: Build the characteristic morphism χ : Γ̄ → Ωᴳ that classifies
  the subgraph of non-star vertices.

  For now, we'll use a postulate and implement this properly after
  understanding 1Lab's work.name construction better.
  -}

  postulate
    χ-non-star : Graph-hom Γ̄ (Ωᴳ {o ⊔ ℓ} {o ⊔ ℓ})

  {-|
  **Implementation strategy** (from Cat.Instances.Graphs.Omega):
  ```agda
  χ-non-star .Graph-hom.node v = lift (is-non-star v)
  χ-non-star .Graph-hom.edge {v} {w} e =
    record { fst = lift (edge-preserves-non-star e)
           ; snd = (λ _ → ?) , (λ _ → ?)
           }
  ```

  Need to prove that edges preserve the non-star property.
  -}

  {-|
  ### Step 3.3: X as Pullback

  TODO: Define X as the pullback of χ-non-star along trueᴳ.

  For now postulated - need to use Graphs-pullbacks from 1Lab.
  -}

  postulate
    X : Graph o ℓ

  {-|
  **Mathematical interpretation**:
  - Vertices of X = {v ∈ Γ̄ | is-non-star v}
  - Edges in X = edges of Γ̄ between non-star vertices
  - This is exactly the subgraph excluding A★
  -}

  {-|
  ## Phase 4: X inherits Orientation from Γ̄

  Since X is a subgraph of Γ̄, it inherits the orientation properties.
  -}

  postulate
    subgraph-classical : is-oriented Γ̄ → is-classical X
    subgraph-no-loops : is-oriented Γ̄ → no-loops X
    subgraph-acyclic : is-oriented Γ̄ → acyclic X

  {-|
  **Proof strategy**:
  - **Classical**: Subgraph has fewer edges, so at-most-one property preserved
  - **No-loops**: Self-edges in X would be self-edges in Γ̄
  - **Acyclic**: Cycles in X would be cycles in Γ̄

  All three follow from the fact that X ⊆ Γ̄ and morphisms are restrictions.
  -}

  X-oriented : is-oriented X
  X-oriented = subgraph-classical Γ̄-oriented ,
               subgraph-no-loops Γ̄-oriented ,
               subgraph-acyclic Γ̄-oriented

  {-|
  ## Phase 5: Poset and Category Structures on X

  **Proposition 1.1(i)**: CX is a poset.

  The poset structure uses path-based reachability as the order relation.
  Antisymmetry follows from acyclicity.
  -}

  X-Poset : Poset o (o ⊔ ℓ)
  X-Poset .Poset.Ob = Graph.Node X
  X-Poset .Poset._≤_ x y = Path-in X x y
  X-Poset .Poset.≤-thin {x} {y} = path-is-set X {x} {y}
  X-Poset .Poset.≤-refl {x} = nil
  X-Poset .Poset.≤-trans {x} {y} {z} p q = p ++ q
  X-Poset .Poset.≤-antisym {x} {y} p q = is-acyclic X-oriented p q

  {-|
  **Key insight**: The antisymmetry law uses acyclicity!
  If we have paths x → y and y → x, then by acyclicity we get x ≡ y.
  This is exactly the proof from the paper's Proposition 1.1(i).
  -}

  X-Category : Precategory o (o ⊔ ℓ)
  X-Category .Precategory.Ob = Graph.Node X
  X-Category .Precategory.Hom x y = Path-in X x y
  X-Category .Precategory.Hom-set x y = path-is-set X
  X-Category .Precategory.id = nil
  X-Category .Precategory._∘_ q p = p ++ q
  X-Category .Precategory.idr f = ++-idr f
  X-Category .Precategory.idl f = refl
  X-Category .Precategory.assoc f g h = ++-assoc f g h

  {-|
  **Note**: This is a thin category (poset-as-category) since paths are
  unique up to equality (path-is-set).
  -}

{-|
## Roadmap to DNN-Topos (Phase 6 - Future Work)

The poset X constructed above is the base category for the full topos structure
described in Section 1.5 of the paper.

### From the Paper (lines 568-571)

> "It is remarkable that the main structural part (which is the projection from
> a product to its components) can be interpreted by the fact that the presheaf
> is a sheaf for a natural Grothendieck topology J on the category C: in every
> object x of C the only covering is the full category C|x, except when x is of
> the type of A★, where we add the covering made by the arrows of the type
> a' → A★."

### Fork Grothendieck Topology J

**Coverage definition**:
```agda
fork-coverage : Coverage (to-category Γ̄) ℓ
fork-coverage .covers v =
  if is-fork-star v
  then IncomingArrows v  -- {a' → A★ | all incoming}
  else MaximalSieve v     -- Trivial coverage
```

**Grothendieck axioms**:
1. **has-is-prop**: Coverage membership is propositional
2. **stable**: Pullbacks preserve coverings
3. **maximal**: Identity morphism generates covering
4. **local**: Gluing compatible sections

### Sheaf Condition at A★

For any presheaf F on Γ̄ to be a sheaf:

**F(A★) ≅ ∏_{a'→A★} F(a')**

This is the **product decomposition** that makes sheafification replace:
- F(A★) with the product of F(a') for all incoming a'
- The identity map with the diagonal map

### Key Equivalences

**Corollary (line 749)**: C∼ ≃ C∧_X
- The topos of sheaves on (Γ̄, J)
- is equivalent to
- The category of presheaves on X

**Why**: Friedman's theorem - sites with trivial endomorphisms are equivalent
to presheaf toposes on subcategories with trivial coverings.

**Corollary (line 791)**: C∼ ≃ Sh(X, Alexandrov)
- The topos of sheaves on (Γ̄, J)
- is equivalent to
- Sheaves on X with Alexandrov topology

**Why**: X is a poset, so it has a natural Alexandrov topology. Presheaves
on X extend uniquely to sheaves on this topology.

### Implementation Plan (ForkTopos.agda)

**File**: `src/Neural/Graph/ForkTopos.agda`

```agda
module Neural.Graph.ForkTopos where

open import Neural.Graph.ForkPoset
open import Cat.Site.Grothendieck
open import Cat.Instances.Sheaves

-- Define the fork Grothendieck topology
fork-topology : Topology (to-category Γ̄) ℓ
fork-topology .covering v R =
  if-fork-star v (has-all-incoming R) (is-maximal R)
fork-topology .has-is-prop = ... -- Prove 4 axioms
fork-topology .stable = ...
fork-topology .maximal = ...
fork-topology .local = ...

-- Build the DNN-Topos
DNN-Topos : Precategory _ _
DNN-Topos = Sh[ to-category Γ̄ , fork-topology ]

-- Prove Corollary (line 749)
topos≃presheaves : DNN-Topos ≃ᶜ PSh X-Category
topos≃presheaves = Friedman-equivalence fork-trivial-coverings

-- Prove Corollary (line 791)
topos≃alexandrov : DNN-Topos ≃ᶜ Sh-Alexandrov X-Poset
topos≃alexandrov = Proposition-1.2 X-alexandrov-topology
```

### Mathematical Significance

The topos structure captures:
1. **Compositionality**: Functoriality of neural layers
2. **Information aggregation**: Sheaf condition at convergent nodes
3. **Backpropagation**: Natural transformations in the topos
4. **Semantic functioning**: Internal logic and type theory

This is the foundation for:
- Section 2: Stacks and groupoid actions (CNNs, equivariance)
- Section 3: Dynamics and homology (semantic information)
- Section 4: Memories and braids (LSTMs, temporal structure)
- Section 5: 3-categories and derivators (attention mechanisms)

**Current status**: Poset X implemented (this file)
**Next step**: Implement fork-topology and build DNN-Topos
**References**: Belfiore & Bennequin (2022), Sections 1.3-1.5
-}
